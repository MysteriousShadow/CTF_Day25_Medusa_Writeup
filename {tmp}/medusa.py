import base64, itertools
code=''.join(chr(c^k) for c,k in zip(base64.b64decode(b''), itertools.cycle(b'c720e4710dcf2d9166622088d72e6464')))


print(code)